*jq-playground.txt*          For NVIM v0.8.0         Last change: 2024 July 22

==============================================================================
Table of Contents                            *jq-playground-table-of-contents*

1. jq-playground.nvim                       |jq-playground-jq-playground.nvim|
  - Setup                             |jq-playground-jq-playground.nvim-setup|
  - Configuration             |jq-playground-jq-playground.nvim-configuration|
  - :JqPlayground             |jq-playground-jq-playground.nvim-:jqplayground|
  - Tips                               |jq-playground-jq-playground.nvim-tips|
2. Links                                                 |jq-playground-links|

==============================================================================
1. jq-playground.nvim                       *jq-playground-jq-playground.nvim*


  Interact with jq in Neovim, using interactive buffers
Like jqplay.org or Neovims builtin Treesitter playground (|`:InspectTree`|).


SETUP                                 *jq-playground-jq-playground.nvim-setup*

Using the default configuration with lazy.nvim as package manager:

>lua
    {
      "yochem/jq-playground.nvim",
      config = true,
    }
<

If you use another package manager than lazy.nvim, make sure to run the setup
function to register the `:JqPlayground` command:

>lua
    require("jq-playground").setup()
<


CONFIGURATION                 *jq-playground-jq-playground.nvim-configuration*

There are options available for defining the window layout. These are the
options, along with their defaults:

>lua
    require("jq-playground").setup({
      output_window = {
        split_direction = "right",
        width = nil,
        height = nil,
      },
      query_window = {
        split_direction = "bottom",
        width = nil,
        height = 0.3,
      },
    })
<

- `split_direction`: can be `"left"`, `"right"`, `"above"` or `"below"`. The
    split direction of the output window is relative to the input window, and the
    query window is relative to the output window.
- `width` and `height`:
    - `nil`: use the default (half of current width/height)
    - `0-1`: percentage of current width/height
    - `>1`: absolute width/height in number of characters or lines


:JQPLAYGROUND                 *jq-playground-jq-playground.nvim-:jqplayground*

Navigate to a JSON file, and execute the command `:JqPlayground`. Two scratch
buffers will be opened: a buffer for the JQ-filter and one for displaying the
results. Simply press `<CR>` (enter) in the filter window to refresh the
results buffer.

You can also provide a filename to the `:JqPlayground` command. This is useful
if the JSON file is very large and slows Neovim down:

>
    :JqPlayground sample.json
<


TIPS                                   *jq-playground-jq-playground.nvim-tips*

If you have a saved filter that you want to load into the filter window, then
run:

>
    :r /path/to/some/query.jq
<

If you want to save the current query or output json, navigate to that buffer
and run:

>
    :w /path/to/save/{query.jq,output.json}
<

If you want to use a keymap instead of the `:JqPlayground` command, use this:

>lua
    vim.keymap.set('n', '<leader>jq', vim.cmd.JqPlayground)
<

==============================================================================
2. Links                                                 *jq-playground-links*

1. *Example screenshot*: example/screenshot.png

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
